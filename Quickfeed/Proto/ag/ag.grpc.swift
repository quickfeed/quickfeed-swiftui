//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ag.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `AutograderServiceClient`, then call methods of this protocol to make API calls.
internal protocol AutograderServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: AutograderServiceClientInterceptorFactoryProtocol? { get }

  func getUser(
    _ request: Void,
    callOptions: CallOptions?
  ) -> UnaryCall<Void, User>

  func getUsers(
    _ request: Void,
    callOptions: CallOptions?
  ) -> UnaryCall<Void, Users>

  func getUserByCourse(
    _ request: CourseUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CourseUserRequest, User>

  func updateUser(
    _ request: User,
    callOptions: CallOptions?
  ) -> UnaryCall<User, Void>

  func isAuthorizedTeacher(
    _ request: Void,
    callOptions: CallOptions?
  ) -> UnaryCall<Void, AuthorizationResponse>

  func getGroup(
    _ request: GetGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetGroupRequest, Group>

  func getGroupByUserAndCourse(
    _ request: GroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GroupRequest, Group>

  func getGroupsByCourse(
    _ request: CourseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CourseRequest, Groups>

  func createGroup(
    _ request: Group,
    callOptions: CallOptions?
  ) -> UnaryCall<Group, Group>

  func updateGroup(
    _ request: Group,
    callOptions: CallOptions?
  ) -> UnaryCall<Group, Void>

  func deleteGroup(
    _ request: GroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GroupRequest, Void>

  func getCourse(
    _ request: CourseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CourseRequest, Course>

  func getCourses(
    _ request: Void,
    callOptions: CallOptions?
  ) -> UnaryCall<Void, Courses>

  func getCoursesByUser(
    _ request: EnrollmentStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<EnrollmentStatusRequest, Courses>

  func createCourse(
    _ request: Course,
    callOptions: CallOptions?
  ) -> UnaryCall<Course, Course>

  func updateCourse(
    _ request: Course,
    callOptions: CallOptions?
  ) -> UnaryCall<Course, Void>

  func updateCourseVisibility(
    _ request: Enrollment,
    callOptions: CallOptions?
  ) -> UnaryCall<Enrollment, Void>

  func getAssignments(
    _ request: CourseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CourseRequest, Assignments>

  func updateAssignments(
    _ request: CourseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CourseRequest, Void>

  func getEnrollmentsByUser(
    _ request: EnrollmentStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<EnrollmentStatusRequest, Enrollments>

  func getEnrollmentsByCourse(
    _ request: EnrollmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<EnrollmentRequest, Enrollments>

  func createEnrollment(
    _ request: Enrollment,
    callOptions: CallOptions?
  ) -> UnaryCall<Enrollment, Void>

  func updateEnrollment(
    _ request: Enrollment,
    callOptions: CallOptions?
  ) -> UnaryCall<Enrollment, Void>

  func updateEnrollments(
    _ request: CourseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CourseRequest, Void>

  func getSubmissions(
    _ request: SubmissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SubmissionRequest, Submissions>

  func getSubmissionsByCourse(
    _ request: SubmissionsForCourseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SubmissionsForCourseRequest, CourseSubmissions>

  func updateSubmission(
    _ request: UpdateSubmissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<UpdateSubmissionRequest, Void>

  func updateSubmissions(
    _ request: UpdateSubmissionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<UpdateSubmissionsRequest, Void>

  func rebuildSubmission(
    _ request: RebuildRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<RebuildRequest, Submission>

  func createBenchmark(
    _ request: GradingBenchmark,
    callOptions: CallOptions?
  ) -> UnaryCall<GradingBenchmark, GradingBenchmark>

  func updateBenchmark(
    _ request: GradingBenchmark,
    callOptions: CallOptions?
  ) -> UnaryCall<GradingBenchmark, Void>

  func deleteBenchmark(
    _ request: GradingBenchmark,
    callOptions: CallOptions?
  ) -> UnaryCall<GradingBenchmark, Void>

  func createCriterion(
    _ request: GradingCriterion,
    callOptions: CallOptions?
  ) -> UnaryCall<GradingCriterion, GradingCriterion>

  func updateCriterion(
    _ request: GradingCriterion,
    callOptions: CallOptions?
  ) -> UnaryCall<GradingCriterion, Void>

  func deleteCriterion(
    _ request: GradingCriterion,
    callOptions: CallOptions?
  ) -> UnaryCall<GradingCriterion, Void>

  func createReview(
    _ request: ReviewRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ReviewRequest, Review>

  func updateReview(
    _ request: ReviewRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ReviewRequest, Void>

  func getReviewers(
    _ request: SubmissionReviewersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SubmissionReviewersRequest, Reviewers>

  func loadCriteria(
    _ request: LoadCriteriaRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<LoadCriteriaRequest, Benchmarks>

  func getProviders(
    _ request: Void,
    callOptions: CallOptions?
  ) -> UnaryCall<Void, Providers>

  func getOrganization(
    _ request: OrgRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OrgRequest, Organization>

  func getRepositories(
    _ request: URLRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<URLRequest, Repositories>

  func isEmptyRepo(
    _ request: RepositoryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<RepositoryRequest, Void>
}

extension AutograderServiceClientProtocol {
  internal var serviceName: String {
    return "AutograderService"
  }

  /// Unary call to GetUser
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUser(
    _ request: Void,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Void, User> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInterceptors() ?? []
    )
  }

  /// Unary call to GetUsers
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUsers(
    _ request: Void,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Void, Users> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetUsers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUsersInterceptors() ?? []
    )
  }

  /// Unary call to GetUserByCourse
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserByCourse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserByCourse(
    _ request: CourseUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CourseUserRequest, User> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetUserByCourse",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserByCourseInterceptors() ?? []
    )
  }

  /// Unary call to UpdateUser
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateUser(
    _ request: User,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<User, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/UpdateUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserInterceptors() ?? []
    )
  }

  /// Unary call to IsAuthorizedTeacher
  ///
  /// - Parameters:
  ///   - request: Request to send to IsAuthorizedTeacher.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isAuthorizedTeacher(
    _ request: Void,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Void, AuthorizationResponse> {
    return self.makeUnaryCall(
      path: "/AutograderService/IsAuthorizedTeacher",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsAuthorizedTeacherInterceptors() ?? []
    )
  }

  /// Unary call to GetGroup
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getGroup(
    _ request: GetGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetGroupRequest, Group> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGroupInterceptors() ?? []
    )
  }

  /// Unary call to GetGroupByUserAndCourse
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGroupByUserAndCourse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getGroupByUserAndCourse(
    _ request: GroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GroupRequest, Group> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetGroupByUserAndCourse",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGroupByUserAndCourseInterceptors() ?? []
    )
  }

  /// Unary call to GetGroupsByCourse
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGroupsByCourse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getGroupsByCourse(
    _ request: CourseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CourseRequest, Groups> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetGroupsByCourse",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGroupsByCourseInterceptors() ?? []
    )
  }

  /// Unary call to CreateGroup
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGroup(
    _ request: Group,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group, Group> {
    return self.makeUnaryCall(
      path: "/AutograderService/CreateGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  /// Unary call to UpdateGroup
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroup(
    _ request: Group,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Group, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/UpdateGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupInterceptors() ?? []
    )
  }

  /// Unary call to DeleteGroup
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteGroup(
    _ request: GroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GroupRequest, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/DeleteGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteGroupInterceptors() ?? []
    )
  }

  /// Unary call to GetCourse
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCourse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCourse(
    _ request: CourseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CourseRequest, Course> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetCourse",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCourseInterceptors() ?? []
    )
  }

  /// Unary call to GetCourses
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCourses.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCourses(
    _ request: Void,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Void, Courses> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetCourses",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCoursesInterceptors() ?? []
    )
  }

  /// Unary call to GetCoursesByUser
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCoursesByUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCoursesByUser(
    _ request: EnrollmentStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EnrollmentStatusRequest, Courses> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetCoursesByUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCoursesByUserInterceptors() ?? []
    )
  }

  /// Unary call to CreateCourse
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCourse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createCourse(
    _ request: Course,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Course, Course> {
    return self.makeUnaryCall(
      path: "/AutograderService/CreateCourse",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCourseInterceptors() ?? []
    )
  }

  /// Unary call to UpdateCourse
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCourse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateCourse(
    _ request: Course,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Course, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/UpdateCourse",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCourseInterceptors() ?? []
    )
  }

  /// Unary call to UpdateCourseVisibility
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCourseVisibility.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateCourseVisibility(
    _ request: Enrollment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Enrollment, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/UpdateCourseVisibility",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCourseVisibilityInterceptors() ?? []
    )
  }

  /// Unary call to GetAssignments
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAssignments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAssignments(
    _ request: CourseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CourseRequest, Assignments> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetAssignments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAssignmentsInterceptors() ?? []
    )
  }

  /// Unary call to UpdateAssignments
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAssignments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateAssignments(
    _ request: CourseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CourseRequest, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/UpdateAssignments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAssignmentsInterceptors() ?? []
    )
  }

  /// Unary call to GetEnrollmentsByUser
  ///
  /// - Parameters:
  ///   - request: Request to send to GetEnrollmentsByUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getEnrollmentsByUser(
    _ request: EnrollmentStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EnrollmentStatusRequest, Enrollments> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetEnrollmentsByUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEnrollmentsByUserInterceptors() ?? []
    )
  }

  /// Unary call to GetEnrollmentsByCourse
  ///
  /// - Parameters:
  ///   - request: Request to send to GetEnrollmentsByCourse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getEnrollmentsByCourse(
    _ request: EnrollmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EnrollmentRequest, Enrollments> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetEnrollmentsByCourse",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEnrollmentsByCourseInterceptors() ?? []
    )
  }

  /// Unary call to CreateEnrollment
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateEnrollment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createEnrollment(
    _ request: Enrollment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Enrollment, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/CreateEnrollment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateEnrollmentInterceptors() ?? []
    )
  }

  /// Unary call to UpdateEnrollment
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateEnrollment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateEnrollment(
    _ request: Enrollment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Enrollment, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/UpdateEnrollment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEnrollmentInterceptors() ?? []
    )
  }

  /// Unary call to UpdateEnrollments
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateEnrollments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateEnrollments(
    _ request: CourseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CourseRequest, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/UpdateEnrollments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateEnrollmentsInterceptors() ?? []
    )
  }

  /// Get latest submissions for all course assignments for a user or a group.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSubmissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSubmissions(
    _ request: SubmissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SubmissionRequest, Submissions> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetSubmissions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSubmissionsInterceptors() ?? []
    )
  }

  /// Get lab submissions for every course user or every course group
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSubmissionsByCourse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSubmissionsByCourse(
    _ request: SubmissionsForCourseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SubmissionsForCourseRequest, CourseSubmissions> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetSubmissionsByCourse",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSubmissionsByCourseInterceptors() ?? []
    )
  }

  /// Unary call to UpdateSubmission
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSubmission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateSubmission(
    _ request: UpdateSubmissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<UpdateSubmissionRequest, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/UpdateSubmission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSubmissionInterceptors() ?? []
    )
  }

  /// Unary call to UpdateSubmissions
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSubmissions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateSubmissions(
    _ request: UpdateSubmissionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<UpdateSubmissionsRequest, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/UpdateSubmissions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSubmissionsInterceptors() ?? []
    )
  }

  /// Unary call to RebuildSubmission
  ///
  /// - Parameters:
  ///   - request: Request to send to RebuildSubmission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rebuildSubmission(
    _ request: RebuildRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RebuildRequest, Submission> {
    return self.makeUnaryCall(
      path: "/AutograderService/RebuildSubmission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRebuildSubmissionInterceptors() ?? []
    )
  }

  /// manual grading //
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBenchmark.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBenchmark(
    _ request: GradingBenchmark,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GradingBenchmark, GradingBenchmark> {
    return self.makeUnaryCall(
      path: "/AutograderService/CreateBenchmark",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBenchmarkInterceptors() ?? []
    )
  }

  /// Unary call to UpdateBenchmark
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBenchmark.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateBenchmark(
    _ request: GradingBenchmark,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GradingBenchmark, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/UpdateBenchmark",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBenchmarkInterceptors() ?? []
    )
  }

  /// Unary call to DeleteBenchmark
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteBenchmark.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteBenchmark(
    _ request: GradingBenchmark,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GradingBenchmark, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/DeleteBenchmark",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBenchmarkInterceptors() ?? []
    )
  }

  /// Unary call to CreateCriterion
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCriterion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createCriterion(
    _ request: GradingCriterion,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GradingCriterion, GradingCriterion> {
    return self.makeUnaryCall(
      path: "/AutograderService/CreateCriterion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCriterionInterceptors() ?? []
    )
  }

  /// Unary call to UpdateCriterion
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCriterion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateCriterion(
    _ request: GradingCriterion,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GradingCriterion, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/UpdateCriterion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCriterionInterceptors() ?? []
    )
  }

  /// Unary call to DeleteCriterion
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCriterion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteCriterion(
    _ request: GradingCriterion,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GradingCriterion, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/DeleteCriterion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCriterionInterceptors() ?? []
    )
  }

  /// Unary call to CreateReview
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateReview.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createReview(
    _ request: ReviewRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ReviewRequest, Review> {
    return self.makeUnaryCall(
      path: "/AutograderService/CreateReview",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateReviewInterceptors() ?? []
    )
  }

  /// Unary call to UpdateReview
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateReview.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateReview(
    _ request: ReviewRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ReviewRequest, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/UpdateReview",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateReviewInterceptors() ?? []
    )
  }

  /// Unary call to GetReviewers
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReviewers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getReviewers(
    _ request: SubmissionReviewersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SubmissionReviewersRequest, Reviewers> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetReviewers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReviewersInterceptors() ?? []
    )
  }

  /// Unary call to LoadCriteria
  ///
  /// - Parameters:
  ///   - request: Request to send to LoadCriteria.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func loadCriteria(
    _ request: LoadCriteriaRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<LoadCriteriaRequest, Benchmarks> {
    return self.makeUnaryCall(
      path: "/AutograderService/LoadCriteria",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoadCriteriaInterceptors() ?? []
    )
  }

  /// Unary call to GetProviders
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProviders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProviders(
    _ request: Void,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Void, Providers> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetProviders",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProvidersInterceptors() ?? []
    )
  }

  /// Unary call to GetOrganization
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrganization.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOrganization(
    _ request: OrgRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OrgRequest, Organization> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetOrganization",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrganizationInterceptors() ?? []
    )
  }

  /// Unary call to GetRepositories
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRepositories.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRepositories(
    _ request: URLRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<URLRequest, Repositories> {
    return self.makeUnaryCall(
      path: "/AutograderService/GetRepositories",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRepositoriesInterceptors() ?? []
    )
  }

  /// Unary call to IsEmptyRepo
  ///
  /// - Parameters:
  ///   - request: Request to send to IsEmptyRepo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func isEmptyRepo(
    _ request: RepositoryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RepositoryRequest, Void> {
    return self.makeUnaryCall(
      path: "/AutograderService/IsEmptyRepo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsEmptyRepoInterceptors() ?? []
    )
  }
}

internal protocol AutograderServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getUser'.
  func makeGetUserInterceptors() -> [ClientInterceptor<Void, User>]

  /// - Returns: Interceptors to use when invoking 'getUsers'.
  func makeGetUsersInterceptors() -> [ClientInterceptor<Void, Users>]

  /// - Returns: Interceptors to use when invoking 'getUserByCourse'.
  func makeGetUserByCourseInterceptors() -> [ClientInterceptor<CourseUserRequest, User>]

  /// - Returns: Interceptors to use when invoking 'updateUser'.
  func makeUpdateUserInterceptors() -> [ClientInterceptor<User, Void>]

  /// - Returns: Interceptors to use when invoking 'isAuthorizedTeacher'.
  func makeIsAuthorizedTeacherInterceptors() -> [ClientInterceptor<Void, AuthorizationResponse>]

  /// - Returns: Interceptors to use when invoking 'getGroup'.
  func makeGetGroupInterceptors() -> [ClientInterceptor<GetGroupRequest, Group>]

  /// - Returns: Interceptors to use when invoking 'getGroupByUserAndCourse'.
  func makeGetGroupByUserAndCourseInterceptors() -> [ClientInterceptor<GroupRequest, Group>]

  /// - Returns: Interceptors to use when invoking 'getGroupsByCourse'.
  func makeGetGroupsByCourseInterceptors() -> [ClientInterceptor<CourseRequest, Groups>]

  /// - Returns: Interceptors to use when invoking 'createGroup'.
  func makeCreateGroupInterceptors() -> [ClientInterceptor<Group, Group>]

  /// - Returns: Interceptors to use when invoking 'updateGroup'.
  func makeUpdateGroupInterceptors() -> [ClientInterceptor<Group, Void>]

  /// - Returns: Interceptors to use when invoking 'deleteGroup'.
  func makeDeleteGroupInterceptors() -> [ClientInterceptor<GroupRequest, Void>]

  /// - Returns: Interceptors to use when invoking 'getCourse'.
  func makeGetCourseInterceptors() -> [ClientInterceptor<CourseRequest, Course>]

  /// - Returns: Interceptors to use when invoking 'getCourses'.
  func makeGetCoursesInterceptors() -> [ClientInterceptor<Void, Courses>]

  /// - Returns: Interceptors to use when invoking 'getCoursesByUser'.
  func makeGetCoursesByUserInterceptors() -> [ClientInterceptor<EnrollmentStatusRequest, Courses>]

  /// - Returns: Interceptors to use when invoking 'createCourse'.
  func makeCreateCourseInterceptors() -> [ClientInterceptor<Course, Course>]

  /// - Returns: Interceptors to use when invoking 'updateCourse'.
  func makeUpdateCourseInterceptors() -> [ClientInterceptor<Course, Void>]

  /// - Returns: Interceptors to use when invoking 'updateCourseVisibility'.
  func makeUpdateCourseVisibilityInterceptors() -> [ClientInterceptor<Enrollment, Void>]

  /// - Returns: Interceptors to use when invoking 'getAssignments'.
  func makeGetAssignmentsInterceptors() -> [ClientInterceptor<CourseRequest, Assignments>]

  /// - Returns: Interceptors to use when invoking 'updateAssignments'.
  func makeUpdateAssignmentsInterceptors() -> [ClientInterceptor<CourseRequest, Void>]

  /// - Returns: Interceptors to use when invoking 'getEnrollmentsByUser'.
  func makeGetEnrollmentsByUserInterceptors() -> [ClientInterceptor<EnrollmentStatusRequest, Enrollments>]

  /// - Returns: Interceptors to use when invoking 'getEnrollmentsByCourse'.
  func makeGetEnrollmentsByCourseInterceptors() -> [ClientInterceptor<EnrollmentRequest, Enrollments>]

  /// - Returns: Interceptors to use when invoking 'createEnrollment'.
  func makeCreateEnrollmentInterceptors() -> [ClientInterceptor<Enrollment, Void>]

  /// - Returns: Interceptors to use when invoking 'updateEnrollment'.
  func makeUpdateEnrollmentInterceptors() -> [ClientInterceptor<Enrollment, Void>]

  /// - Returns: Interceptors to use when invoking 'updateEnrollments'.
  func makeUpdateEnrollmentsInterceptors() -> [ClientInterceptor<CourseRequest, Void>]

  /// - Returns: Interceptors to use when invoking 'getSubmissions'.
  func makeGetSubmissionsInterceptors() -> [ClientInterceptor<SubmissionRequest, Submissions>]

  /// - Returns: Interceptors to use when invoking 'getSubmissionsByCourse'.
  func makeGetSubmissionsByCourseInterceptors() -> [ClientInterceptor<SubmissionsForCourseRequest, CourseSubmissions>]

  /// - Returns: Interceptors to use when invoking 'updateSubmission'.
  func makeUpdateSubmissionInterceptors() -> [ClientInterceptor<UpdateSubmissionRequest, Void>]

  /// - Returns: Interceptors to use when invoking 'updateSubmissions'.
  func makeUpdateSubmissionsInterceptors() -> [ClientInterceptor<UpdateSubmissionsRequest, Void>]

  /// - Returns: Interceptors to use when invoking 'rebuildSubmission'.
  func makeRebuildSubmissionInterceptors() -> [ClientInterceptor<RebuildRequest, Submission>]

  /// - Returns: Interceptors to use when invoking 'createBenchmark'.
  func makeCreateBenchmarkInterceptors() -> [ClientInterceptor<GradingBenchmark, GradingBenchmark>]

  /// - Returns: Interceptors to use when invoking 'updateBenchmark'.
  func makeUpdateBenchmarkInterceptors() -> [ClientInterceptor<GradingBenchmark, Void>]

  /// - Returns: Interceptors to use when invoking 'deleteBenchmark'.
  func makeDeleteBenchmarkInterceptors() -> [ClientInterceptor<GradingBenchmark, Void>]

  /// - Returns: Interceptors to use when invoking 'createCriterion'.
  func makeCreateCriterionInterceptors() -> [ClientInterceptor<GradingCriterion, GradingCriterion>]

  /// - Returns: Interceptors to use when invoking 'updateCriterion'.
  func makeUpdateCriterionInterceptors() -> [ClientInterceptor<GradingCriterion, Void>]

  /// - Returns: Interceptors to use when invoking 'deleteCriterion'.
  func makeDeleteCriterionInterceptors() -> [ClientInterceptor<GradingCriterion, Void>]

  /// - Returns: Interceptors to use when invoking 'createReview'.
  func makeCreateReviewInterceptors() -> [ClientInterceptor<ReviewRequest, Review>]

  /// - Returns: Interceptors to use when invoking 'updateReview'.
  func makeUpdateReviewInterceptors() -> [ClientInterceptor<ReviewRequest, Void>]

  /// - Returns: Interceptors to use when invoking 'getReviewers'.
  func makeGetReviewersInterceptors() -> [ClientInterceptor<SubmissionReviewersRequest, Reviewers>]

  /// - Returns: Interceptors to use when invoking 'loadCriteria'.
  func makeLoadCriteriaInterceptors() -> [ClientInterceptor<LoadCriteriaRequest, Benchmarks>]

  /// - Returns: Interceptors to use when invoking 'getProviders'.
  func makeGetProvidersInterceptors() -> [ClientInterceptor<Void, Providers>]

  /// - Returns: Interceptors to use when invoking 'getOrganization'.
  func makeGetOrganizationInterceptors() -> [ClientInterceptor<OrgRequest, Organization>]

  /// - Returns: Interceptors to use when invoking 'getRepositories'.
  func makeGetRepositoriesInterceptors() -> [ClientInterceptor<URLRequest, Repositories>]

  /// - Returns: Interceptors to use when invoking 'isEmptyRepo'.
  func makeIsEmptyRepoInterceptors() -> [ClientInterceptor<RepositoryRequest, Void>]
}

internal final class AutograderServiceClient: AutograderServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: AutograderServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the AutograderService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AutograderServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

